//AUTHOR: Ariana Konhilas
//COURSE: CPT 187
//PURPOSE: [Tracks usernames and passwords for customer accounts]
//STARTDATE: [09/30/2020]

package edu.cpt187.konhilas.exercise6;

import java.io.PrintWriter; //imports print writer
import java.io.FileWriter; //imports file writer
import java.io.IOException; //imports IO exception
import java.util.Scanner; //imports scanner
import java.io.FileInputStream; //imports file input stream

public class UserAccounts 
{
	//Declare and Initialize Constants
	private final int NOT_FOUND = -1;
	private final int RESET_VALUE = 0;
	private final int MAXIMUM_RECORDS = 50;

	//Declare and Initialize Attributes
	private String[] userNames = new String [MAXIMUM_RECORDS];
	private String[] passwords = new String [MAXIMUM_RECORDS];
	private String masterFileName = "";
	private int recordCount = 0;
	private int searchedIndex = 0;

	public UserAccounts(String borrowedFileName) //non default constructor
	{
		masterFileName = borrowedFileName;
	}

	//Behaviors - Setters

	public void setUserAccountArrays()
	{//loads the username and password arrays
		try
		{//attempts to open file
			Scanner infile = new Scanner (new FileInputStream(masterFileName));
			recordCount = RESET_VALUE;
			while (infile.hasNext() == true && recordCount < MAXIMUM_RECORDS)
			{//assigns arrays if file opened
				userNames[recordCount] = infile.next();
				passwords[recordCount] = infile.next();
				recordCount++;
			}//end assigning arrays
			infile.close();
		}//end of file open attempt
		catch (IOException ex)
		{//error catching
			recordCount = NOT_FOUND;
		}//end error catching
	}//end set account arrays

	//assigns a value
	public void setSearchedIndex(String borrowedUserName)
	{
		searchedIndex = getSeqSearch(borrowedUserName);
	}

	//overloaded method, assigns a value test passwordmatch
	public void setSearchedIndex(String borrowedUserName, String borrowedPassword)
	{
		searchedIndex = getSeqSearch(borrowedUserName);

		if (searchedIndex >= RESET_VALUE && getPasswordMatch(borrowedPassword) == false)
		{//if no password match
			searchedIndex = NOT_FOUND;
		}//end if no password match
	}

	//writes one record
	public void setWriteOneRecord(String borrowedUserName, String borrowedPassword)
	{
		try
		{//attempts to write to a file
			PrintWriter filePW = new PrintWriter (new FileWriter(masterFileName, true));
			recordCount = RESET_VALUE;
			filePW.printf("%n%s\t%s", borrowedUserName, borrowedPassword);
			filePW.close();
		}//end write attempt
		catch (IOException ex)
		{//start error catching
			recordCount = NOT_FOUND;
		}//end error catching
	}

	//Behaviors - Getters
	//searches for value and returns search
	public int getSeqSearch(String borrowedBorrowedUserName)
	{
		int localIndex = 0;
		int localFound = NOT_FOUND;
		while (localIndex < recordCount)
		{//runs while localIndex < recordCount
			if (borrowedBorrowedUserName.equalsIgnoreCase(userNames[localIndex]))
			{//if match reassign
				localFound = localIndex;
				localIndex = recordCount;
			}//end match reassign
			else
			{//start increment index no match
				localIndex++;
			}//end increment index no match
		}
		return localFound;
	}

	//returns a value testing password match
	public boolean getPasswordMatch(String borrowedBorrowedPassword)
	{
		return borrowedBorrowedPassword.equals(passwords[searchedIndex]);
	}

	//returns a value
	public String getFileName()
	{
		return masterFileName;
	}

	//returns a value
	public int getMaximumRecords()
	{
		return MAXIMUM_RECORDS;
	}

	//returns a value
	public int getRecordCount()
	{
		return recordCount;
	}

	//returns a value
	public int getSearchedIndex()
	{
		return searchedIndex;
	}


}//END of Class
